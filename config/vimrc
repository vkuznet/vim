" Very nice collection of vim tips
" http://stackoverflow.com/questions/164847/what-is-in-your-vimrc
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/?
" http://amix.dk/vim/vimrc.html
"
" List usefull vim plugins
" http://mirnazim.org/writings/vim-plugins-i-use/
" http://www.vimninjas.com/2012/09/03/5-plugins-you-should-put-in-your-vimrc/
" Vim tips: http://www.cs.swarthmore.edu/help/vim/home.html
" Use CtrlP to search for files, see https://github.com/kien/ctrlp.vim
"
" daw -- delete a word under cursor
" caw -- delete a word under cursor and put into insert mode
" see more with :help text-object
" for instance vaw, vas, etc. commands
" :set spell
" it uses the following commands, [s for next misspelled word, z= to give list
" of choices
"
" Reformat paragraph
" select paragraph with Visual mode
" gq  - reformat paragraph

" show CR symbols
" :e ++ff=unix
"
" the ^M symbol can be simulated as ctrl+V+M
"
" pathogen plugin
filetype off
"runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
"call pathogen#runtime_append_all_bundles()
" GO settings
filetype off
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim
filetype plugin indent on
" end of GO settings
syntax on
filetype plugin indent on

" ----------------------- Custom settings ---------------------
set nocompatible
set history=1000
set autoindent

" ####### powerline settings
" set laststatus=2 sets powerline, but somehow doesn't work on lxplus and cause
" prompt ENTER
set laststatus=2
set fillchars+=stl:\ ,stlnc:\
set t_Co=256
" #######
"
set mouse=a
set modelines=0
set nohlsearch
set backup
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set ignorecase
set smartcase
":set smartcase do the following
"/copyright      " Case insensitive
"/Copyright      " Case sensitive
"/copyright\C    " Case sensitive
"/Copyright\c    " Case insensitive

set gdefault
"set incsearch
set showcmd
set showmatch
set hlsearch
set encoding=utf-8
set showmode
set hidden
set ttyfast
set ruler
"set relativenumber
set number
set undofile
" set undolevels, this limit .un~ files and therefore reduce start-up time
set ul=10
set wrap
set textwidth=79
" to debug formatoptions use
" :verbose set fo? 
" use +=a for autoformatting the text
" use +=t for formatting the text, w/o formatting existing parts
set formatoptions=
"set colorcolumn=85
set backspace=indent,eol,start
"set foldmethod=marker
" keep all folds open all the time
set foldlevel=99
set wildmenu
set wildmode=list:longest,full
set wildignore=*.o,*~,*.pyc
"--------------------------------------------
" PLEASE note VK 01/09/13: I found that autocompletion
" quite often stuck, especially in snippets mode, so I'll disable it
" set autocompletion to read from dictionary
" see more http://vim.wikia.com/wiki/Dictionary_completions
"set dictionary-=/usr/share/dict/words dictionary+=/usr/share/dict/words
"set complete-=k complete+=k
"--------------------------------------------

" store swap/back-up files in central location
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set undodir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

au FocusLost * :wa
"au BufNewFile,BufRead *.yaml,*.yml so ~/.vim/plugin/yaml.vim
au BufRead,BufNewFile *.txt setfiletype text
" here I set formatoptions, fo=nca
"autocmd FileType text setlocal tw=80 fo=nca
" Enable spell check for text files
if v:version >= 700
    autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en_us
    autocmd BufNewFile,BufRead *.rst setlocal spell spelllang=en_us
    autocmd BufNewFile,BufRead *.Rmd setlocal spell spelllang=en_us
endif

" Highlight current line
"set cul
hi CursorLine term=none cterm=none ctermbg=7
"hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
"hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white

" ----------------------- Custom let-ings ---------------------
" remap ESC key
inoremap jj <ESC>
" set my leader key
let mapleader = "\\"
" Erlang settings
let g:erlangFold=0
let g:snips_author = 'Valentin Kuznetsov <vkuznet AT gmail dot com>'
" Powerline settings
"let g:Powerline_symbols = 'unicode'
"let g:Powerline_symbols = 'fancy'
let g:Powerline_symbols = 'compatible'

" highlight current line and curson
"nnoremap <leader><leader>c :set cursorline! cursorcolumn!<CR>
" highlight current line only
nnoremap <leader><leader>c :set cursorline!<CR>

" css settings
"let g:cssColorVimDoNotMessMyUpdatetime = 1

" ----------------------- Custom mappings ---------------------
" mimic behavior of LESS pager, press space to go forward
nnoremap <space> <C-f>
nnoremap , <C-b>
" toggle paste outside INSERT mode "
map <Leader>p :set invpaste<CR>:set paste?<CR>
" toggle paste in INSERT mode "
set pastetoggle=<leader>p
" use space to clear up highlights
nnoremap <leader><space> :noh<CR>
nnoremap <leader>nt :NERDTree<cr>
" open snippet file
nnoremap <leader>snip :e ~/.vim/bundle/snipmate-snippets/snippets/
" use tab for jumping around brackets
nnoremap <tab> %
vnoremap <tab> %
" paste from system clipboard
nnoremap <leader>v "*p<CR>
" remove all white spaces at the end of the lines in a file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>
" remove carriage return symbol
nnoremap <leader>R :%s///<cr>
" switch to UNIX mode
nnoremap <leader>U :e ++ff=unix<cr>
"nnoremap <leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>
"nnoremap <leader>S ?{<CR>jV/^\s*\}?$<CR>:sort<CR>:noh<CR>
"nnoremap <leader>S :sort<CR>:noh<CR>
" enter spell check
nnoremap <leader>sp :setlocal spell spelllang=en_us<CR>:set spell<CR>
nnoremap <leader>ns :set nospell<CR>
" select visual block from the current line till the end of file
"nnoremap <leader>v V`]
" vertical split and open up vimrc file
nnoremap <leader>vimrc <C-w><C-v><C-l>:e $MYVIMRC<cr>
" vertical split
nnoremap <leader><leader>v <C-w>v<C-w>l
" horizontal split
nnoremap <leader><leader>h <C-w>s<C-w>l
" run ack
nnoremap <leader>a :Ack
" run CommandT
"nnoremap <leader>o :CommandT<CR>
"nnoremap <leader>O <Esc>:CommandTFlush<CR>
" run CtrlP plugin to search for a file
"nnoremap <leader>o :CtrlP<CR>
" run CtrlP plugin to search for a file/buffer or MRU (Most Recently Used)
nnoremap <leader>o :CtrlPMixed<CR>
" undo plugin
nnoremap <leader>undo :GundoToggle<CR>
" useful save/quit
nnoremap <leader>wq :wq!<CR>
nnoremap <leader>aq :wqa!<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q!<CR>
" tagbar key
"nnoremap <leader>t :TagbarToggle<CR>
nnoremap <leader>t :TagbarOpenAutoClose<CR>
"nnoremap <leader>ct :!/opt/local/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
" walk around location list (syntastic plugin store errors over there)
nnoremap <leader>ll :ll<CR>
nnoremap <leader>ln :lnext<CR>
nnoremap <leader>lp :lprev<CR>
let g:syntastic_always_populate_loc_list = 1

" fold tag
nnoremap <leader>ft Vatzf
" Vim folding commands
" https://www.linux.com/learn/tutorials/442438-vim-tips-folding-fun
"zf#j creates a fold from the cursor down # lines.
"zf/string creates a fold from the cursor to string .
"zj moves the cursor to the next fold.
"zk moves the cursor to the previous fold.
"zo opens a fold at the cursor.
"zO opens all folds at the cursor.
"zm increases the foldlevel by one.
"zM closes all open folds.
"zr decreases the foldlevel by one.
"zR decreases the foldlevel to zero -- all folds will be open.
"zR open all folds
"zd deletes the fold at the cursor.
"zE deletes all folds.
"[z move to start of open fold.
"]z move to end of open fold.

"Useful commands
"zR	Unfold all folded lines in file.
"za	Open/close (toggle) a folded group of lines.
"zA	Open a closed fold or close an open fold recursively.
"zc	Close a folded group of lines.
"zC	Close all folded lines recursively.
"zd	Delete a folded line.
"zD	Delete all folded lines recursively.
"zE	Eliminate all folded lines in file.
"zF	Create N-folded lines.
"
" -----------------------------------------------------------
" I use C-Left/Right to switch between OSX spaces, once I'll upgrade to Lion
" I need to check if I can put back the mapping in vim
" here <silent> â€“ tells vim not to echo to the statusline what its doing during
" the execution of the mapping.
" Next buffer
nnoremap <leader>n :bnext<CR>
nnoremap <leader>b :bprev<CR>
nnoremap <leader>d :bdelete<CR>
nnoremap <leader><leader><space> :buffers<CR>:buffer<Space>
" Next Tab
nnoremap <silent> <C-n> :tabnext<CR>
" Previous Tab
nnoremap <silent> <C-p> :tabprevious<CR>
" New Tab
nnoremap <silent> <C-t> :tabnew<CR>
" move-up to next window
nnoremap <silent> <C-k> :wincmd k<CR>
" move-down to next window
nnoremap <silent> <C-j> :wincmd j<CR>
" move-left to next window
nnoremap <silent> <C-h> :wincmd h<CR>
" move-right to next window
nnoremap <silent> <C-l> :wincmd l<CR>
" move-up, use shift-key plus k
nnoremap <silent> <S-k> <C-U><C-U>
" move-down, use shift-key plus j
nnoremap <silent> <S-j> <C-D><C-D>
" markdown to HTML
nnoremap <leader>md :%!/usr/local/bin/Markdown.pl --html4tags <cr>
" -----------------------------------------------------------

" ----------------------- Custom colors ---------------------
" COLORS
" color scheme
" colorscheme molokai.vim
" -----------------------------------------------------------
"
" Local leader tricks
:autocmd FileType javascript nnoremap <buffer> <localleader>c I//
:autocmd FileType go nnoremap <buffer> <localleader>c I//
:autocmd FileType python     nnoremap <buffer> <localleader>c I#

" ----------------------- Syntatstic settings ---------------
let g:syntastic_mode_map = {'mode':'passive', 'active_filetypes':[], 'passive_filetypes':[]}
"nnoremap <leader>sc :SyntasticCheck<CR>

highlight   clear
highlight   Pmenu         ctermfg=0 ctermbg=2
highlight   PmenuSel      ctermfg=0 ctermbg=7
highlight   PmenuSbar     ctermfg=7 ctermbg=0
highlight   PmenuThumb    ctermfg=0 ctermbg=7
"set tags+=~/.vim/tags/stl

" Complete options (disable preview scratch window)
set completeopt=menu,menuone,longest
" Limit popup menu height
"set pumheight = 15
 
" SuperTab option for context aware completion
let g:SuperTabDefaultCompletionType = "context"
 
" Disable auto popup, use <Tab> to autocomplete
let g:clang_complete_auto = 0
" Show clang errors in the quickfix window
let g:clang_complete_copen = 1
let g:clang_use_library = 1
let g:clang_library_path = "/opt/local/libexec/llvm-3.4/lib/"
let g:clang_exec = '"/opt/local/bin/clang++ -std=c++11 -x c++'
let g:clang_user_options = '2> NUL || exit 0"'

" r-plugin
let vimrplugin_screenplugin = 0

" abbreviations
:iabbrev adn and
:iabbrev waht what
:iabbrev tehn then
:iabbrev @@ vkuznet@gmail.com
:iabbrev ccopy Copyright 2013 Valentin Kuznetsov, all rights reserved.

" %s/pat1/pat2/ replace pat1 to pat2
" @: repeat previous command (including substitute)
nnoremap <leader><leader>s @:

" :%s/\%V{pat}/{str}/g or :'<,'>s/\%V{pat}/{str}/g
" to replace pat1 to pat2 within a line
" set number and enable toggle (turn on/off this setting)
nnoremap <leader><leader>n :set number!<CR>

"
" vim help naviation:
" ctrl-] open up a tag
nnoremap <leader>] <C-]>
" ctrl-o return back to previous page
nnoremap <leader>[ <C-o>
" /|.\{-}| search next tag
nnoremap <leader><leader>q /\|.\{-}\|<CR>

" fugitive stuff
autocmd User fugitive
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif
autocmd BufReadPost fugitive://* set bufhidden=delete
" example of how to set up statusline using fugitive, it is commented though
" since powerline is already sets correctly git branch.
"set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
"
" YouCompleteMe
" run the following command to get clang falgs
" echo | clang -std=c++11 -stdlib=libc++ -v -E -x c++ -
" and put appriproate include path into global ycm_extra_conf
let g:ycm_global_ycm_extra_conf = '/Users/vk/.vim/bundle/YouCompleteMe/ycm_extra_conf.py'
"
" ------------- REFERENCE -------------------
"  :abbreviate   - list abbreviations
"  :args         - argument list
"  :augroup      - augroups
"  :autocmd      - list auto-commands
"  :buffers      - list buffers
"  :breaklist    - list current breakpoints
"  :cabbrev      - list command mode abbreviations
"  :changes      - changes
"  :cmap         - list command mode maps
"  :command      - list commands
"  :compiler     - list compiler scripts
"  :digraphs     - digraphs
"  :file         - print filename, cursor position and status (like Ctrl-G)
"  :filetype     - on/off settings for filetype detect/plugins/indent
"  :function     - list user-defined functions (names and argument lists but
"  not the full code)
"  :function Foo - user-defined function Foo() (full code list)
"  :highlight    - highlight groups
"  :history c    - command history
"  :history =    - expression history
"  :history s    - search history
"  :history      - your commands
"  :iabbrev      - list insert mode abbreviations
"  :imap         - list insert mode maps
"  :intro        - the Vim splash screen, with summary version info
"  :jumps        - your movements
"  :language     - current language settings
"  :let          - all variables
"  :let FooBar   - variable FooBar
"  :let g:       - global variables
"  :let v:       - Vim variables
"  :list         - buffer lines (many similar commands)
"  :lmap         - language mappings (set by keymap or by lmap)
"  :ls           - buffers
"  :ls!          - buffers, including "unlisted" buffers
"  :map!         - Insert and Command-line mode maps (imap, cmap)
"  :map          - Normal and Visual mode maps (nmap, vmap, xmap, smap, omap)
"  :map<buffer>  - buffer local Normal and Visual mode maps
"  :map!<buffer> - buffer local Insert and Command-line mode maps
"  :marks        - marks
"  :menu         - menu items
"  :messages     - message history
"  :nmap         - Normal-mode mappings only
"  :omap         - Operator-pending mode mappings only
"  :print        - display buffer lines (useful after :g or with a range)
"  :reg          - registers
"  :scriptnames  - all scripts sourced so far
"  :set all      - all options, including defaults
"  :setglobal    - global option values
"  :setlocal     - local option values
"  :set          - options with non-default value
"  :set termcap  - list terminal codes and terminal keys
"  :smap         - Select-mode mappings only
"  :spellinfo    - spellfiles used
"  :syntax       - syntax items
"  :syn sync     - current syntax sync mode
"  :tabs         - tab pages
"  :tags         - tag stack contents
"  :undolist     - leaves of the undo tree
"  :verbose      - show info about where a map or autocmd or function is
"  defined
"  :version      - list version and build options
"  :vmap         - Visual and Select mode mappings only
"  :winpos       - Vim window position (gui)
"  :xmap         - visual mode maps only
"
"
" special case for crontab (check .myset.sh)
:if $VIM_CRONTAB == "true"
:set nobackup
:set nowritebackup
:endif

