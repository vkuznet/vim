diff --git a/snippets/cpp.snippets b/snippets/cpp.snippets
index c3e19fe..2c7cc18 100644
--- a/snippets/cpp.snippets
+++ b/snippets/cpp.snippets
@@ -1,5 +1,27 @@
+## Documentation
+snippet doc
+	/*
+	 * ${1:function()}
+	 * Created by ${2:`g:snips_author`} on `strftime("%Y-%m-%d %H:%M:%S")`.
+	 *
+	 * Description:
+	 *    ${3:Function/Method Description}
+	 * Parameters:
+	 *    ${4:input parameters}
+	 * Returns:
+	 *	  ${5:return value}
+	 * Throws:
+	 *    ${6:Exceptions}
+	 */
+snippet top
+	// `expand('%:t')`
+	// Created by ${1:`g:snips_author`} on `strftime("%Y-%m-%d %H:%M:%S")`.
+	// All rights reserved.
+
+
 ## STL Collections
 # std::array
+
 snippet array
 	std::array<${1:T}, ${2:N}> ${3};${4}
 # std::vector
@@ -47,6 +69,9 @@ snippet queue
 # std::priority_queue
 snippet pqueue
 	std::priority_queue<${1:T}> ${2};${3}
+# std::atomic
+snippet atomic
+	std::atomic<${1:T}> ${2};
 ##
 ## Access Modifiers
 # private
@@ -64,30 +89,169 @@ snippet fr
 # mutable
 snippet mu
 	mutable
-## 
-## Class
-# class
+##
+## Classes
+##
 snippet cl
-	class ${1:`Filename('$1', 'name')`} 
-	{
+	class ${1:`Filename('$1', 'name')`} {
+		// ---------- friend classes and functions ---------------
 	public:
-		$1(${2});
-		~$1();
+		// ---------- constants, enums and typedefs --------------
+
+		// ---------- Constructors and destructor ----------------
+		$1();
+		virtual ~$1();
+
+		// ---------- member functions ---------------------------
+
+		// ---------- const member functions ---------------------
+
+		// ---------- static member functions --------------------
+
+	protected:
+		// ---------- protected member functions -----------------
+
+		// ---------- protected const member functions -----------
 
 	private:
-		${3:/* data */}
+		// ---------- Constructors and destructor ----------------
+		$1( const $1& src ); // copy-ctor
+		// $1(const $1&) = delete; // stop default
+		$1( $1&& src ); // move-ctor
+
+		// ---------- assignment operator(s) ---------------------
+		const $1& operator=( const $1& rhs ); // copy assignment oper
+		// const $1& operator=(const $1&) = delete; // stop default
+		$1& operator=( $1&& rhs ); // move assignment oper
+
+		// ---------- private member functions -------------------
+
+		// ---------- private const member functions -------------
+
+		// ---------- data members -------------------------------
+
+		// ---------- static data members ------------------------
 	};
 # member function implementation
 snippet mfun
 	${4:void} ${1:`Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
 		${5:/* code */}
 	}
+snippet m=
+	${1:`Filename('$1', 'ClassName')`}&
+	$1::operator=(const $1& rhs)
+	{
+		// Check for self-assignment.
+		if (this == &rhs) {
+			return *this;
+		}
+		${2:/* $1 assignment: free old memory, copy new memory */}
+		return *this;
+	}
+snippet mcopy
+	${1:`Filename('$1', 'ClassName')`}::$1(const $1& src)
+	{
+		${2:/* $1 copy ctor */}
+	}
+snippet tcl
+	template <typename T>
+	class ${1:`Filename('$1', 'name')`} {
+		// ---------- friend classes and functions ---------------
+	public:
+		// ---------- constants, enums and typedefs --------------
+
+		// ---------- Constructors and destructor ----------------
+		$1();
+		virtual ~$1();
+
+		// ---------- member functions ---------------------------
+
+		// ---------- const member functions ---------------------
+
+		// ---------- static member functions --------------------
+
+	protected:
+		// ---------- protected member functions -----------------
+
+		// ---------- protected const member functions -----------
+
+	private:
+		// ---------- Constructors and destructor ----------------
+		$1( const $1<T>& src ); // copy-ctor
+		// $1(const $1<T>&) = delete; // stop default
+		$1( $1<T>&& src ); // move-ctor
+
+		// ---------- assignment operator(s) ---------------------
+		const $1<T>& operator=( const $1<T>& rhs ); // copy assignment oper
+		// const $1<T>& operator=(const $1<T>&) = delete; // stop default
+		$1<T>& operator=( $1<T>&& rhs ); // move assignment oper
+
+		// ---------- private member functions -------------------
+
+		// ---------- private const member functions -------------
+
+		// ---------- data members -------------------------------
+
+		// ---------- static data members ------------------------
+	};
+# member function implementation
+snippet mtfun
+	template <typename T>
+	${4:void}
+	${1:`Filename('$1', 'ClassName')`}<T>::${2:memberFunction}(${3}) {
+		${5:/* code */}
+	}
+snippet mt=
+	template <typename T>
+	${1:`Filename('$1', 'ClassName')`}&
+	$1::operator=(const $1& rhs)
+	{
+		// Check for self-assignment.
+		if (this == &rhs) {
+			return *this;
+		}
+		${2:/* $1 assignment: free old memory, copy new memory */}
+		return *this;
+	}
+snippet mtcopy
+	template <typename T>
+	${1:`Filename('$1', 'ClassName')`}::$1(const $1& src)
+	{
+		${2:/* $1 copy ctor */}
+	}
 # namespace
+snippet nstd
+	using namespace std;
 snippet ns
 	namespace ${1:`Filename('', 'my')`} {
 		${2}
 	} /* namespace $1 */
 ##
+## Pointers and casts
+##
+snippet sptr
+	shared_ptr<${1}>
+snippet uptr
+	unique_ptr<${1}>
+
+snippet ccast
+	const_cast<${1}>(${2})
+snippet scast
+	static_cast<${1}>(${2})
+snippet rcast
+	reinterpret_cast<${1}>(${2})
+snippet dcast
+	dynamic_cast<${1}>(${2})
+
+snippet spcast
+	static_pointer_cast<${1}>(${2})
+snippet dpcast
+	dynamic_pointer_cast<${1}>(${2})
+snippet cpcast
+	const_pointer_cast<${1}>(${2})
+snippet ilist
+	initializer_list<${1}>
+##
 ## Input/Output
 # std::cout
 snippet cout
@@ -97,7 +261,7 @@ snippet cin
 	std::cin >> ${1};${2}
 ##
 ## Iteration
-# for i 
+# for i
 snippet fori
 	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
 		${4:/* code */}
@@ -129,3 +293,33 @@ snippet lld
 	[${1}](${2}){
 		${3:/* code */}
 	}${4}
+
+# Matrix allocation and destructions
+snippet ctor_mat
+	${1:mMatrix} = new ${2:Element}*[${3:mWidth}];
+	unsigned int i = 0;
+	try {
+		for (i = 0; i < ${4:mHeight}; ++i)
+			$1[i] = new $2[$4];
+	} catch (...) {
+		cout << "Exception caught in ctor, cleaning up...” << endl;
+		// Clean up any memory we already allocated, because the destructor
+		// will never be called. The upper bound of the for loop is the
+		// index of the last element in the $1 array that we tried
+		// to allocate (the one that failed). All indices before that
+		// one store pointers to allocated memory that must be freed.
+		for (unsigned int j = 0; j < i; j++) {
+			delete [] $1[j];
+		}
+		delete [] $1;
+		$1 = nullptr;
+		// Translate any exception to bad_alloc, to be defined via #include <stdexcept>
+		throw bad_alloc();
+	}
+
+snippet dtor_mat
+	for (unsigned int i = 0; i < ${2:m_height}; ++i) {
+		delete [] ${1:m_mat}[i];
+	}
+	delete [] $1;
+	$1 = nullptr;
